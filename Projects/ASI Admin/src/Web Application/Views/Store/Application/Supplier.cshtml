@using asi.asicentral.web
@using asi.asicentral.web.Controllers.Store;
@model asi.asicentral.web.model.store.SupplierApplicationModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@Resource.StoreTitleSupplierApplication</h2>

@using (Html.BeginForm("EditSupplier", "Application"))
{        
<div class="row-fluid">
    <div class="span4">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.Id) @Html.HiddenFor(m => m.UserId) @Html.HiddenFor(m => m.OrderId) @Html.HiddenFor(m => m.ActionName)
        @Html.LabelFor(m => m.ExternalReference) @Html.EditorFor(m => m.ExternalReference)
        @Html.LabelFor(m => m.Company) @Html.EditorFor(m => m.Company)
        @Html.LabelFor(m => m.BillingAddress1) @Html.EditorFor(m => m.BillingAddress1)
        @Html.LabelFor(m => m.BillingPhone) @Html.EditorFor(m => m.BillingPhone)
        @Html.LabelFor(m => m.BillingTollFree) @Html.EditorFor(m => m.BillingTollFree)
        @Html.LabelFor(m => m.BillingFax) @Html.EditorFor(m => m.BillingFax)
        @Html.LabelFor(m => m.BillingEmail) @Html.EditorFor(m => m.BillingEmail)
        @Html.LabelFor(m => m.BillingWebUrl) @Html.EditorFor(m => m.BillingWebUrl)
        
        @Html.LabelFor(m => m.ShippingStreet1) @Html.EditorFor(m => m.ShippingAddress)
        @Html.LabelFor(m => m.ShippingCity) @Html.EditorFor(m => m.ShippingCity)
        @Html.LabelFor(m => m.ShippingState) @Html.EditorFor(m => m.ShippingState)
        @Html.LabelFor(m => m.ShippingZip) @Html.EditorFor(m => m.ShippingZip)
        @Html.LabelFor(m => m.UPSShippingNumber) @Html.EditorFor(m => m.UPSShippingNumber)

        @Html.LabelFor(m => m.ContactName) @Html.EditorFor(m => m.ContactName)
        @Html.LabelFor(m => m.ContactTitle) @Html.EditorFor(m => m.ContactTitle)
        @Html.LabelFor(m => m.ContactEmail) @Html.EditorFor(m => m.ContactEmail)
        @Html.LabelFor(m => m.ContactPhone) @Html.EditorFor(m => m.ContactPhone)

        @Html.LabelFor(m => m.LineNames) @Html.EditorFor(m => m.LineNames)
        @Html.LabelFor(m => m.LineMinorityOwned) @Html.EditorFor(m => m.LineMinorityOwned)
        @Html.LabelFor(m => m.SalesVolume) @Html.EditorFor(m => m.SalesVolume)
        @Html.LabelFor(m => m.YearEstablished) @Html.EditorFor(m => m.YearEstablished)
        @Html.LabelFor(m => m.YearEnteredAdvertising) @Html.EditorFor(m => m.YearEnteredAdvertising)
        @Html.LabelFor(m => m.OfficeHourStart) @Html.EditorFor(m => m.OfficeHourStart)
        @Html.LabelFor(m => m.NumberOfEmployee) @Html.EditorFor(m => m.NumberOfEmployee)
        @Html.LabelFor(m => m.AffiliateCompanyName) @Html.EditorFor(m => m.AffiliateCompanyName)
        @Html.LabelFor(m => m.AffiliateASINumber) @Html.EditorFor(m => m.AffiliateASINumber)
        @Html.LabelFor(m => m.ProductionTime) @Html.EditorFor(m => m.ProductionTime)
        @Html.LabelFor(m => m.UPSAddress) @Html.EditorFor(m => m.UPSAddress)
        @Html.LabelFor(m => m.FedTaxId) @Html.EditorFor(m => m.FedTaxId)
    </div>
    <div class="span4">
        @Html.LabelFor(m => m.IsImprinterVsDecorator)  @Html.CheckBox("IsImprinterVsDecorator")
        @Html.LabelFor(m => m.IsImporter) @Html.CheckBox("IsImporter")
        @Html.LabelFor(m => m.IsManufacturer) @Html.CheckBox("IsManufacturer")
        @Html.LabelFor(m => m.IsRetailer) @Html.CheckBox("IsRetailer")
        @Html.LabelFor(m => m.IsWholesaler) @Html.CheckBox("IsWholesaler")
        @Html.LabelFor(m => m.IsUnionMade) @Html.CheckBox("IsUnionMade")
        @Html.LabelFor(m => m.IsRushServiceAvailable) @Html.CheckBox("IsRushServiceAvailable")
        @Html.LabelFor(m => m.SellToEndUsers) @Html.CheckBox("SellToEndUsers")
        @Html.LabelFor(m => m.SellThruInternet) @Html.CheckBox("SellThruInternet")
        @Html.LabelFor(m => m.SellThruRetail) @Html.CheckBox("SellThruRetail")
        @Html.LabelFor(m => m.SellThruDirectMarketing) @Html.CheckBox("SellThruDirectMarketing")
        @Html.LabelFor(m => m.SellThruAffiliate) @Html.CheckBox("SellThruAffiliate")

        @if (Model.Contacts != null)
        {
            <h3>@Resource.SupplierAppCompanyContacts</h3>
            for (int i = 0; i < Model.Contacts.Count; i++)
            {
                if (Model.Contacts.ElementAt(i) != null)
                { 
                    <h4>@Model.Contacts.ElementAt(i).Title Contact</h4>
                    <p>Name: @Model.Contacts.ElementAt(i).Name</p>
                    <p>Title: @Model.Contacts.ElementAt(i).Title</p>
                    <p>Email: @Model.Contacts.ElementAt(i).Email</p>
                    <p>Phone: @Model.Contacts.ElementAt(i).Phone</p>
                    <p>Fax: @Model.Contacts.ElementAt(i).Fax</p>
                }
            }
        }
    </div>
    <div class="span4">
        <h4>Order Status</h4>
        <div class="well">
           Order Status: <span>@Model.OrderStatus</span> <br />
        </div>
        @if (Model.OrderStatus != asi.asicentral.model.store.OrderStatus.Approved) {
        <input class="command" type="submit" value="@ApplicationController.COMMAND_ACCEPT" /> <input class="command" type="submit" value="@ApplicationController.COMMAND_SAVE" />
        } 
        else if (Model.OrderStatus == asi.asicentral.model.store.OrderStatus.Pending) { 
        <input class="command" type="submit" value="@ApplicationController.COMMAND_REJECT" />
        }
        @if (Model.OrderStatus == asi.asicentral.model.store.OrderStatus.Approved){ @Html.ActionLink("Close", "../Orders") }
        else { @Html.ActionLink("Cancel", "../Orders") }
    </div>
</div>
}

@section Scripts {
    <script src="/Scripts/asi.js"></script>
    <script>
        $('input.command').click(function (e) {
            $('#ActionName').val(e.target.value);
            if ($('#ActionName').val() == '@ApplicationController.COMMAND_ACCEPT') {
                //make sure we have Timms value
                if (!$('#ExternalReference').val()) {
                    alert('You need to pass a TIMMS reference to approve the order');
                    e.preventDefault();
                }
                else {
                    var isnum = /^\d+$/.test($('#ExternalReference').val());
                    if (!isnum) {
                        alert("TIMMS reference must contain only numbers");
                        e.preventDefault();
                    }
                }
            }
        });

    </script>
}
